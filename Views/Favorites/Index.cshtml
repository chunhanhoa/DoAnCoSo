@{
    ViewData["Title"] = "Mục yêu thích";
    var vocabularies = ViewBag.Vocabularies as List<TiengAnh.Models.VocabularyModel> ?? new List<TiengAnh.Models.VocabularyModel>();
    var grammars = ViewBag.Grammars as List<TiengAnh.Models.GrammarModel> ?? new List<TiengAnh.Models.GrammarModel>();
    int currentPage = ViewBag.CurrentPage;
    int totalVocabularyPages = ViewBag.TotalVocabularyPages;
    int totalGrammarPages = ViewBag.TotalGrammarPages;
    int totalVocabularies = ViewBag.TotalVocabularies;
    int totalGrammars = ViewBag.TotalGrammars;
}

<section class="py-5">
    <div class="container">
        <div class="row mb-4">
            <div class="col-lg-8">
                <h1 class="fw-bold mb-3">Mục yêu thích của bạn</h1>
                <p class="lead">Tất cả từ vựng và ngữ pháp bạn đã đánh dấu yêu thích đều được hiển thị ở đây.</p>
            </div>
        </div>

        <ul class="nav nav-pills mb-4" id="favoritesTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active px-4" id="vocabulary-tab" data-bs-toggle="pill" data-bs-target="#vocabulary-content" type="button" role="tab">
                    <i class="fas fa-book me-2"></i> Từ vựng (@totalVocabularies)
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link px-4" id="grammar-tab" data-bs-toggle="pill" data-bs-target="#grammar-content" type="button" role="tab">
                    <i class="fas fa-pen me-2"></i> Ngữ pháp (@totalGrammars)
                </button>
            </li>
        </ul>

        <div class="tab-content" id="favoritesTabContent">
            <!-- Vocabulary Favorites -->
            <div class="tab-pane fade show active" id="vocabulary-content" role="tabpanel">
                @if (vocabularies.Any())
                {
                    <div class="row g-4" id="vocabulary-container">
                        @foreach (var vocab in vocabularies)
                        {
                            <div class="col-md-6 col-lg-4 favorite-item" data-id="@vocab.ID_TV" data-type="vocabulary">
                                <div class="card h-100 border-0 shadow-sm hover-card">
                                    <div class="card-header bg-white border-0">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="badge bg-primary">@vocab.PartOfSpeech</span>
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-favorite-btn"
                                                    data-id="@vocab.ID_TV" data-type="vocabulary" title="Xóa khỏi mục yêu thích">
                                                <i class="fas fa-heart-broken"></i>
                                            </button>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(vocab.Image_TV))
                                    {
                                        <div class="vocab-image-container">
                                            <img src="@vocab.Image_TV" alt="@vocab.Word_TV" class="img-fluid rounded-top vocab-image" />
                                        </div>
                                    }
                                    <div class="card-body p-4">
                                        <h3 class="card-title fw-bold mb-2">@vocab.Word_TV</h3>
                                        <p class="text-muted mb-1"><em>/@vocab.Level_TV/</em></p>
                                        <p class="card-text">@vocab.Meaning_TV</p>
                                        <a href="@Url.Action("Details", "Vocabulary", new { id = vocab.ID_TV })" class="btn btn-outline-primary w-100 mt-2">
                                            <i class="fas fa-book-open me-2"></i> Xem chi tiết
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Vocabulary Pagination -->
                    @if (totalVocabularyPages > 1)
                    {
                        <div class="mt-4">
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                    @for (int i = 1; i <= totalVocabularyPages; i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalVocabularyPages ? "disabled" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i> 
                        Bạn chưa có từ vựng nào trong mục yêu thích. Hãy thêm từ vựng bằng cách nhấn vào biểu tượng trái tim khi xem chi tiết từ.
                    </div>
                }
            </div>

            <!-- Grammar Favorites -->
            <div class="tab-pane fade" id="grammar-content" role="tabpanel">
                @if (grammars.Any())
                {
                    <div class="row g-4" id="grammar-container">
                        @foreach (var grammar in grammars)
                        {
                            <div class="col-md-6 favorite-item" data-id="@grammar.ID_NP" data-type="grammar">
                                <div class="card h-100 border-0 shadow-sm hover-card">
                                    <div class="card-body p-4">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <span class="badge bg-success">@grammar.Level</span>
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-favorite-btn"
                                                    data-id="@grammar.ID_NP" data-type="grammar" title="Xóa khỏi mục yêu thích">
                                                <i class="fas fa-heart-broken"></i>
                                            </button>
                                        </div>
                                        <h3 class="card-title fw-bold mb-3">@grammar.Title_NP</h3>
                                        <p class="card-text">@grammar.Description_NP</p>
                                        <a href="@Url.Action("Details", "Grammar", new { id = grammar.ID_NP })" class="btn btn-outline-success w-100 mt-2">
                                            <i class="fas fa-book-open me-2"></i> Xem chi tiết
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Grammar Pagination -->
                    @if (totalGrammarPages > 1)
                    {
                        <div class="mt-4">
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                    @for (int i = 1; i <= totalGrammarPages; i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalGrammarPages ? "disabled" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i> 
                        Bạn chưa có bài ngữ pháp nào trong mục yêu thích. Hãy thêm bài học bằng cách nhấn vào biểu tượng trái tim khi xem chi tiết bài học.
                    </div>
                }
            </div>
        </div>
    </div>
</section>

<style>
    /* Card hover effect */
    .hover-card {
        transition: all 0.3s ease;
        border-radius: 10px;
    }
    
    .hover-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* Nav pills styling */
    .nav-pills .nav-link {
        border-radius: 30px;
        font-weight: 600;
        color: #495057;
        transition: all 0.3s ease;
        margin-right: 8px;
    }
    
    .nav-pills .nav-link.active {
        background-color: #4e73fa;
        color: white;
        box-shadow: 0 4px 10px rgba(78, 115, 250, 0.3);
    }
    
    .nav-pills .nav-link:not(.active):hover {
        background-color: #e9ecef;
    }
    
    /* Favorite item removal animation */
    .favorite-item.removing {
        animation: fadeOut 0.5s forwards;
        opacity: 1;
    }
    
    @@keyframes fadeOut {
        from { opacity: 1; transform: scale(1); }
        to { opacity: 0; transform: scale(0.8); }
    }
    
    /* Pagination styling */
    .page-link {
        color: #4e73fa;
        border-radius: 5px;
        margin: 0 3px;
    }
    
    .page-item.active .page-link {
        background-color: #4e73fa;
        border-color: #4e73fa;
    }
    
    /* Vocabulary image styling */
    .vocab-image-container {
        height: 160px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
    }
    
    .vocab-image {
        max-height: 100%;
        object-fit: contain;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Remove favorite item with animation
            $('.remove-favorite-btn').on('click', function() {
                const btn = $(this);
                const id = btn.data('id');
                const type = btn.data('type');
                const itemContainer = btn.closest('.favorite-item');
                
                // Prevent multiple clicks
                btn.prop('disabled', true);
                
                // Send AJAX request to remove from favorites
                $.ajax({
                    url: '@Url.Action("RemoveFavorite", "Favorites")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        Id: id.toString(),
                        Type: type
                    }),
                    success: function(response) {
                        if (response.success) {
                            // Add removing class to trigger animation
                            itemContainer.addClass('removing');
                            
                            // Remove element after animation completes
                            setTimeout(function() {
                                itemContainer.remove();
                                
                                // Update count in tab
                                const tabId = type === 'vocabulary' ? '#vocabulary-tab' : '#grammar-tab';
                                const countElement = $(tabId);
                                const currentText = countElement.text();
                                const match = currentText.match(/\((\d+)\)/);
                                
                                if (match && match[1]) {
                                    const newCount = parseInt(match[1]) - 1;
                                    countElement.html(countElement.html().replace(/\(\d+\)/, `(${newCount})`));
                                }
                                
                                // Check if container is empty and show message if needed
                                const containerId = type === 'vocabulary' ? '#vocabulary-container' : '#grammar-container';
                                if ($(containerId).children().length === 0) {
                                    const message = type === 'vocabulary' 
                                        ? '<div class="alert alert-info col-12"><i class="fas fa-info-circle me-2"></i>Bạn chưa có từ vựng nào trong mục yêu thích. Hãy thêm từ vựng bằng cách nhấn vào biểu tượng trái tim khi xem chi tiết từ.</div>'
                                        : '<div class="alert alert-info col-12"><i class="fas fa-info-circle me-2"></i>Bạn chưa có bài ngữ pháp nào trong mục yêu thích. Hãy thêm bài học bằng cách nhấn vào biểu tượng trái tim khi xem chi tiết bài học.</div>';
                                    
                                    $(containerId).html(message);
                                }
                                
                                // Show toast notification
                                showToast('Thành công', 'Đã xóa khỏi mục yêu thích');
                            }, 500);
                        } else {
                            btn.prop('disabled', false);
                            showToast('Lỗi', response.message, 'danger');
                        }
                    },
                    error: function() {
                        btn.prop('disabled', false);
                        showToast('Lỗi', 'Không thể xử lý yêu cầu', 'danger');
                    }
                });
            });
            
            // Function to show toast notification
            function showToast(title, message, type = 'success') {
                const toastHtml = `
                    <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <strong>${title}:</strong> ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;
                
                // Create toast container if it doesn't exist
                if ($('#toast-container').length === 0) {
                    $('body').append('<div id="toast-container" class="toast-container position-fixed bottom-0 end-0 p-3"></div>');
                }
                
                // Append toast to container
                const toast = $(toastHtml);
                $('#toast-container').append(toast);
                
                // Initialize and show toast
                const bsToast = new bootstrap.Toast(toast[0], {
                    delay: 3000
                });
                bsToast.show();
                
                // Remove toast from DOM after it's hidden
                toast.on('hidden.bs.toast', function() {
                    $(this).remove();
                });
            }
        });
    </script>
}
