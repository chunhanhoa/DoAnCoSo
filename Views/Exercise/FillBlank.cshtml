@model List<TiengAnh.Models.BaiTap>
@{
    ViewData["Title"] = "Bài tập điền từ - " + ViewBag.Topic?.NameCd ?? "Chủ đề";
    var topic = ViewBag.Topic as TiengAnh.Models.ChuDe;
}

<!-- Header Section -->
<div class="container mt-5">
    <div class="row mb-4">
        <div class="col-md-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Trang chủ</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Exercise")">Bài tập</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Topic", "Exercise", new { id = topic?.IdCd })">@(topic?.NameCd ?? "Chủ đề")</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Điền từ</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Title and Instructions -->
    <div class="row mb-5">
        <div class="col-md-8">
            <h1 class="display-5 fw-bold mb-3">Điền từ: @(topic?.NameCd ?? "Chủ đề")</h1>
            <p class="lead">Hoàn thành các câu bằng cách điền từ thích hợp vào chỗ trống.</p>
            <div class="card bg-light mb-4">
                <div class="card-body">
                    <h5 class="card-title"><i class="fas fa-lightbulb text-warning me-2"></i>Hướng dẫn</h5>
                    <ul class="mb-0">
                        <li>Đọc câu hỏi cẩn thận và điền từ thích hợp vào chỗ trống</li>
                        <li>Đối chiếu từ điền vào với ngữ cảnh của câu</li>
                        <li>Nhập đúng chính tả và viết thường</li>
                        <li>Nhấn "Kiểm tra" sau khi hoàn thành tất cả câu hỏi</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <div class="progress-container bg-light p-3 rounded shadow-sm">
                <h5 class="mb-3">Tiến độ</h5>
                <div class="progress mb-2" style="height: 25px;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" id="progress-bar">
                        0%
                    </div>
                </div>
                <p class="text-center mb-0">
                    <span id="completed-count">0</span>/<span id="total-count">@Model.Count</span> câu
                </p>
                <p class="text-center text-muted mt-2 mb-0">
                    <i class="fas fa-star text-warning me-1"></i>
                    Điểm: <span id="current-score">0</span>/<span id="max-score">@Model.Count</span>
                </p>
            </div>
        </div>
    </div>

    <!-- Fill in the blanks exercise -->
    <div class="row">
        <div class="col-lg-8">
            <form id="fill-blank-form">
                @foreach (var (exercise, index) in Model.Select((ex, i) => (ex, i + 1)))
                {
                    <div class="card border-0 shadow-sm mb-4 fill-blank-item" id="question-@index" data-question-id="@exercise.IdBt" data-answer="@exercise.AnswerBt">
                        <div class="card-body p-4">
                            <h4 class="fw-bold mb-4">Câu @index:</h4>
                            
                            <div class="fill-blank-question mb-4">
                                @{
                                    // Tạo câu hỏi từ question_BT, chèn một ô input vào vị trí có ____ hoặc .... hoặc [BLANK]
                                    string question = exercise.QuestionBt;
                                    string pattern = @"(____)|(\.\.\.\.|(\[BLANK\]))";
                                    string formattedQuestion = System.Text.RegularExpressions.Regex.Replace(
                                        question, 
                                        pattern, 
                                        m => $"<div class='d-inline-block'><input type='text' class='form-control fill-blank-input' style='width: 120px;' name='answer{exercise.IdBt}' data-question='{index}'></div>"
                                    );

                                    // Xác định đáp án thật sự dựa vào mã đáp án (A, B, C, D)
                                    string actualAnswer = exercise.AnswerBt switch
                                    {
                                        "A" => exercise.OptionA ?? string.Empty,
                                        "B" => exercise.OptionB ?? string.Empty,
                                        "C" => exercise.OptionC ?? string.Empty,
                                        "D" => exercise.OptionD ?? string.Empty,
                                        _ => exercise.AnswerBt // Giữ nguyên nếu không phải A, B, C, D
                                    };
                                }
                                <div class="fill-blank-text fs-5">
                                    @Html.Raw(formattedQuestion)
                                </div>
                            </div>
                            
                            <div class="hint-container mb-3">
                                <button type="button" class="btn btn-link text-muted hint-btn p-0" data-bs-toggle="tooltip" 
                                data-bs-title="Gợi ý: Bắt đầu bằng '@((actualAnswer?.Length > 0 ? actualAnswer[0].ToString() : ""))'">
                                    <i class="fas fa-lightbulb me-1"></i> Gợi ý
                                </button>
                            </div>
                            
                            <div class="feedback mt-3" style="display: none;">
                                <div class="alert alert-success correct-feedback" style="display: none;">
                                    <i class="fas fa-check-circle me-2"></i> Đúng! Đáp án đúng là: <strong class="correct-answer-text">@actualAnswer</strong>
                                </div>
                                <div class="alert alert-danger incorrect-feedback" style="display: none;">
                                    <i class="fas fa-times-circle me-2"></i> Sai! Đáp án đúng là: <strong class="correct-answer-text">@actualAnswer</strong>
                                </div>
                                <div class="explanation bg-light p-3 rounded mt-2">
                                    <p><strong>Giải thích:</strong> @exercise.ExplanationBt</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="d-grid gap-2 d-md-flex justify-content-md-end mb-5">
                    <button type="button" id="check-answers" class="btn btn-primary">
                        <i class="fas fa-check me-2"></i> Kiểm tra
                    </button>
                    <button type="button" id="reset-exercise" class="btn btn-outline-secondary">
                        <i class="fas fa-redo me-2"></i> Làm lại
                    </button>
                </div>
            </form>
        </div>
        
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body p-4">
                    <h5 class="card-title mb-3">Hướng dẫn điền từ</h5>
                    <div class="tips mb-4">
                        <div class="d-flex mb-3">
                            <div class="me-3 text-primary">
                                <i class="fas fa-info-circle fa-lg"></i>
                            </div>
                            <div>
                                <h6 class="mb-1 fw-bold">Đọc kỹ câu hỏi</h6>
                                <p class="small mb-0">Hiểu rõ ngữ cảnh của câu trước khi điền từ</p>
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <div class="me-3 text-primary">
                                <i class="fas fa-spell-check fa-lg"></i>
                            </div>
                            <div>
                                <h6 class="mb-1 fw-bold">Kiểm tra chính tả</h6>
                                <p class="small mb-0">Đảm bảo từ điền vào đúng chính tả</p>
                            </div>
                        </div>
                        <div class="d-flex">
                            <div class="me-3 text-primary">
                                <i class="fas fa-lightbulb fa-lg"></i>
                            </div>
                            <div>
                                <h6 class="mb-1 fw-bold">Sử dụng gợi ý</h6>
                                <p class="small mb-0">Nhấn vào "Gợi ý" nếu bạn gặp khó khăn</p>
                            </div>
                        </div>
                    </div>
                    
                    <hr class="my-4">
                    
                    <div class="text-center">
                        <h6 class="fw-bold mb-3">Kết quả hiện tại</h6>
                        <div class="score-circle mx-auto mb-3">
                            <span id="score-percentage">0%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .fill-blank-input {
        display: inline-block;
        min-width: 120px;
        transition: all 0.3s ease;
    }
    
    .fill-blank-input.is-valid {
        border-color: #198754;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .fill-blank-input.is-invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .fill-blank-item.border-success {
        box-shadow: 0 0 0 3px rgba(25, 135, 84, 0.25) !important;
    }
    
    .fill-blank-item.border-danger {
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.25) !important;
    }
    
    .score-circle {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        border: 10px solid #0d6efd;
    }
    
    .score-circle span {
        font-size: 1.5rem;
        font-weight: bold;
    }
    
    .hint-btn:hover {
        cursor: pointer;
    }
    
    .bg-primary-soft {
        background-color: #cfe2ff;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Get DOM elements
            const progressBar = document.getElementById('progress-bar');
            const completedCount = document.getElementById('completed-count');
            const totalCount = document.getElementById('total-count');
            const currentScore = document.getElementById('current-score');
            const maxScore = document.getElementById('max-score');
            const scorePercentage = document.getElementById('score-percentage');
            const checkAnswersBtn = document.getElementById('check-answers');
            const resetBtn = document.getElementById('reset-exercise');
            const fillBlankInputs = document.querySelectorAll('.fill-blank-input');
            const fillBlankItems = document.querySelectorAll('.fill-blank-item');
            
            // Variables
            const totalQuestions = fillBlankItems.length;
            let completedQuestions = 0;
            let correctAnswers = 0;
            
            // Event listeners
            fillBlankInputs.forEach(input => {
                input.addEventListener('input', function() {
                    // Mark question as attempted if input has value
                    if (this.value.trim() !== '') {
                        const questionIndex = parseInt(this.getAttribute('data-question')) - 1;
                        updateProgress();
                    }
                });
            });
            
            // Check answers button
            checkAnswersBtn.addEventListener('click', function() {
                correctAnswers = 0;
                completedQuestions = 0;
                
                fillBlankItems.forEach((item, index) => {
                    const questionId = item.getAttribute('data-question-id');
                    
                    // Lấy đáp án từ cơ sở dữ liệu (A, B, C, D)
                    const databaseAnswer = item.getAttribute('data-answer');
                    
                    // Lấy đáp án thật từ phần hiển thị
                    const correctAnswerText = item.querySelector('.correct-answer-text').textContent.toLowerCase().trim();
                    
                    const userInput = document.querySelector(`input[name="answer${questionId}"]`).value.toLowerCase().trim();
                    const feedbackDiv = item.querySelector('.feedback');
                    const correctFeedback = item.querySelector('.correct-feedback');
                    const incorrectFeedback = item.querySelector('.incorrect-feedback');
                    
                    // Show feedback
                    feedbackDiv.style.display = 'block';
                    
                    // So sánh với đáp án thật (text), không phải với mã đáp án (A, B, C, D)
                    if (userInput === correctAnswerText) {
                        correctAnswers++;
                        item.classList.add('border-success');
                        item.classList.remove('border-danger');
                        correctFeedback.style.display = 'block';
                        incorrectFeedback.style.display = 'none';
                        
                        // Add valid class to input
                        item.querySelector('.fill-blank-input').classList.add('is-valid');
                        item.querySelector('.fill-blank-input').classList.remove('is-invalid');
                    } else {
                        item.classList.add('border-danger');
                        item.classList.remove('border-success');
                        incorrectFeedback.style.display = 'block';
                        correctFeedback.style.display = 'none';
                        
                        // Add invalid class to input
                        item.querySelector('.fill-blank-input').classList.add('is-invalid');
                        item.querySelector('.fill-blank-input').classList.remove('is-valid');
                    }
                    
                    // Count completed questions
                    if (userInput !== '') {
                        completedQuestions++;
                    }
                });
                
                // Update progress and score
                updateProgress();
                updateScore();
            });
            
            // Reset button
            resetBtn.addEventListener('click', function() {
                // Clear all inputs
                fillBlankInputs.forEach(input => {
                    input.value = '';
                    input.classList.remove('is-valid', 'is-invalid');
                });
                
                // Hide all feedback
                document.querySelectorAll('.feedback').forEach(div => {
                    div.style.display = 'none';
                });
                
                // Remove all border classes
                fillBlankItems.forEach(item => {
                    item.classList.remove('border-success', 'border-danger');
                });
                
                // Reset variables
                completedQuestions = 0;
                correctAnswers = 0;
                
                // Update UI
                updateProgress();
                updateScore();
            });
            
            // Functions
            function updateProgress() {
                // Count filled inputs
                let filledCount = 0;
                fillBlankInputs.forEach(input => {
                    if (input.value.trim() !== '') {
                        filledCount++;
                    }
                });
                
                // Update completed count
                completedQuestions = filledCount;
                completedCount.textContent = completedQuestions;
                
                // Update progress bar
                const progressPercent = Math.round((completedQuestions / totalQuestions) * 100);
                progressBar.style.width = `${progressPercent}%`;
                progressBar.textContent = `${progressPercent}%`;
            }
            
            function updateScore() {
                // Update score
                currentScore.textContent = correctAnswers;
                
                // Update percentage
                const percentage = Math.round((correctAnswers / totalQuestions) * 100);
                scorePercentage.textContent = `${percentage}%`;
            }
        });
    </script>
}
