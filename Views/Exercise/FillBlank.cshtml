@using TiengAnh.Extensions
@model List<ExerciseModel>
@{
    ViewData["Title"] = "Điền vào chỗ trống - " + ViewBag.Topic?.Name_CD ?? "Chủ đề";
    var topic = ViewBag.Topic as TopicModel;
}

<!-- Header Section -->
<div class="container mt-5">
    <div class="row mb-4">
        <div class="col-md-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Trang chủ</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Exercise")">Bài tập</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Topic", "Exercise", new { id = topic?.ID_CD })">@(topic?.Name_CD ?? "Chủ đề")</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Điền từ</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Title and Instructions -->
    <div class="row mb-5">
        <div class="col-md-8">
            <h1 class="display-5 fw-bold mb-3">Điền từ: @(topic?.Name_CD ?? "Chủ đề")</h1>
            <p class="lead">Hoàn thành câu bằng cách điền từ thích hợp. Giúp cải thiện từ vựng và ngữ pháp.</p>
            <div class="card bg-light mb-4">
                <div class="card-body">
                    <h5 class="card-title"><i class="fas fa-lightbulb text-warning me-2"></i>Hướng dẫn</h5>
                    <ul class="mb-0">
                        <li>Đọc toàn bộ câu và xác định từ phù hợp để điền vào chỗ trống</li>
                        <li>Chú ý đến ngữ cảnh và cấu trúc ngữ pháp của câu</li>
                        <li>Có thể dùng gợi ý nếu cần thiết</li>
                        <li>Bấm "Kiểm tra" để xem kết quả sau khi hoàn thành</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <div class="progress-container bg-light p-3 rounded shadow-sm">
                <h5 class="mb-3">Tiến độ</h5>
                <div class="progress mb-2" style="height: 25px;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" id="progress-bar">
                        0%
                    </div>
                </div>
                <p class="text-center mb-0">
                    <span id="completed-count">0</span>/<span id="total-count">@Model.Count</span> câu
                </p>
            </div>
        </div>
    </div>

    <!-- Fill in the blank Exercise -->
    <div class="row">
        <div class="col-lg-9">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <form id="fill-blank-form">
                        @foreach (var (exercise, index) in Model.Select((ex, i) => (ex, i + 1)))
                        {
                            <div class="fill-blank-item mb-4 pb-3 border-bottom" id="fill-item-@index">
                                <h5 class="mb-3">@index. @CreateSentenceWithBlank(exercise.Question_BT)</h5>
                                
                                <div class="fill-blank-sentence">
                                    @{
                                        var sentence = exercise.Question_BT.Replace("[BLANK]", $"<input type='text' class='fill-blank-input' id='blank-{index}' data-correct='{GetCorrectAnswer(exercise)}' placeholder='Điền từ vào đây'>");
                                    }
                                    @Html.Raw(sentence)
                                    
                                    <button type="button" class="btn btn-sm btn-outline-info hint-btn ms-2" data-bs-toggle="tooltip" title="@GetHint(exercise)">
                                        <i class="fas fa-lightbulb"></i> Gợi ý
                                    </button>
                                </div>
                                
                                <div class="feedback mt-2" style="display: none;">
                                    <div class="correct-feedback text-success" style="display: none;">
                                        <i class="fas fa-check-circle me-1"></i> Chính xác!
                                    </div>
                                    <div class="incorrect-feedback text-danger" style="display: none;">
                                        <i class="fas fa-times-circle me-1"></i> Chưa đúng! Đáp án đúng là: <strong class="correct-answer"></strong>
                                    </div>
                                </div>
                                
                                <div class="explanation text-muted mt-2 fst-italic" style="display: none;">
                                    <i class="fas fa-info-circle me-1"></i> @exercise.Explanation_BT
                                </div>
                            </div>
                        }
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" class="btn btn-primary" id="check-answers-btn">
                                <i class="fas fa-check me-1"></i> Kiểm tra
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="reset-btn">
                                <i class="fas fa-redo me-1"></i> Làm lại
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3">
            <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body p-4">
                    <h5 class="card-title mb-3"><i class="fas fa-info-circle text-primary me-2"></i>Thông tin</h5>
                    
                    <p>Bài tập điền từ giúp bạn:</p>
                    <ul>
                        <li>Ôn tập từ vựng hiệu quả</li>
                        <li>Nắm vững cấu trúc câu</li>
                        <li>Cải thiện khả năng đọc hiểu</li>
                    </ul>
                    
                    <hr />
                    
                    <h6 class="mb-2">Điểm của bạn</h6>
                    <div class="score-display p-2 bg-light rounded mb-3 text-center">
                        <span id="current-score" class="fs-4 fw-bold">0</span>/<span id="max-score">@Model.Count</span>
                    </div>
                    
                    <div class="tips bg-primary-soft p-3 rounded">
                        <h6 class="mb-2">Mẹo làm bài</h6>
                        <p class="small mb-0">Để ý đến loại từ (danh từ, động từ, tính từ...) cần điền và chắc chắn rằng nó phù hợp với ngữ cảnh của câu.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Modal -->
    <div class="modal fade" id="resultsModal" tabindex="-1" aria-labelledby="resultsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resultsModalLabel">Kết quả bài tập</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <div class="score-circle mb-3">
                            <span id="score-percentage">0%</span>
                        </div>
                        <h4><span id="score-correct">0</span>/<span id="score-total">@Model.Count</span> câu đúng</h4>
                        <p id="score-message">Hãy cố gắng hơn!</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="continue-btn">Tiếp tục</button>
                    <button type="button" class="btn btn-success" id="retry-btn">Làm lại</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .fill-blank-input {
        display: inline-block;
        width: 150px;
        border: 2px solid #dee2e6;
        border-radius: 4px;
        padding: 0.375rem 0.75rem;
        margin: 0 0.25rem;
    }
    
    .fill-blank-input.correct {
        border-color: #198754;
        background-color: #d1e7dd;
    }
    
    .fill-blank-input.incorrect {
        border-color: #dc3545;
        background-color: #f8d7da;
    }
    
    .fill-blank-input:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        outline: 0;
    }
    
    .score-circle {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        border: 10px solid #0d6efd;
    }
    
    .score-circle span {
        font-size: 2.5rem;
        font-weight: bold;
    }
    
    .hint-btn:hover {
        cursor: pointer;
    }
    
    .bg-primary-soft {
        background-color: #cfe2ff;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Get DOM elements
            const progressBar = document.getElementById('progress-bar');
            const completedCount = document.getElementById('completed-count');
            const totalCount = document.getElementById('total-count');
            const currentScore = document.getElementById('current-score');
            const maxScore = document.getElementById('max-score');
            const checkAnswersBtn = document.getElementById('check-answers-btn');
            const resetBtn = document.getElementById('reset-btn');
            const fillBlankInputs = document.querySelectorAll('.fill-blank-input');
            const resultsModal = new bootstrap.Modal(document.getElementById('resultsModal'));
            const scorePercentage = document.getElementById('score-percentage');
            const scoreCorrect = document.getElementById('score-correct');
            const scoreTotal = document.getElementById('score-total');
            const scoreMessage = document.getElementById('score-message');
            const continueBtn = document.getElementById('continue-btn');
            const retryBtn = document.getElementById('retry-btn');
            
            // Variables
            let startTime = new Date();
            let completed = new Array(fillBlankInputs.length).fill(false);
            
            // Event listeners
            fillBlankInputs.forEach((input, index) => {
                input.addEventListener('input', function() {
                    if (this.value.trim() !== '') {
                        completed[index] = true;
                    } else {
                        completed[index] = false;
                    }
                    updateProgress();
                });
                
                // Enter key to submit
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const nextInput = document.getElementById(`blank-${index + 1}`);
                        if (nextInput) {
                            nextInput.focus();
                        } else {
                            checkAnswersBtn.click();
                        }
                    }
                });
            });
            
            // Check answers button
            checkAnswersBtn.addEventListener('click', function() {
                let correctCount = 0;
                let completedCount = 0;
                
                fillBlankInputs.forEach((input, index) => {
                    const userAnswer = input.value.trim().toLowerCase();
                    const correctAnswer = input.dataset.correct.toLowerCase();
                    const feedbackContainer = input.closest('.fill-blank-item').querySelector('.feedback');
                    const correctFeedback = feedbackContainer.querySelector('.correct-feedback');
                    const incorrectFeedback = feedbackContainer.querySelector('.incorrect-feedback');
                    const explanation = input.closest('.fill-blank-item').querySelector('.explanation');
                    
                    feedbackContainer.style.display = 'block';
                    explanation.style.display = 'block';
                    
                    if (userAnswer === '') {
                        // Highlight empty fields
                        input.style.borderColor = '#ffc107';
                        return;
                    }
                    
                    completedCount++;
                    
                    if (userAnswer === correctAnswer) {
                        input.classList.add('correct');
                        correctFeedback.style.display = 'block';
                        incorrectFeedback.style.display = 'none';
                        correctCount++;
                    } else {
                        input.classList.add('incorrect');
                        correctFeedback.style.display = 'none';
                        incorrectFeedback.style.display = 'block';
                        incorrectFeedback.querySelector('.correct-answer').textContent = correctAnswer;
                    }
                    
                    // Disable input after checking
                    input.disabled = true;
                });
                
                if (completedCount === fillBlankInputs.length) {
                    // Update score display
                    currentScore.textContent = correctCount;
                    
                    // Calculate time spent
                    const endTime = new Date();
                    const timeDiff = Math.floor((endTime - startTime) / 1000); // in seconds
                    
                    // Show results modal
                    showResults(correctCount, fillBlankInputs.length, timeDiff);
                    
                    // Save results
                    saveResults(correctCount, fillBlankInputs.length, timeDiff);
                } else {
                    alert('Vui lòng điền tất cả các ô trống!');
                }
            });
            
            // Reset button
            resetBtn.addEventListener('click', function() {
                if (confirm('Bạn có chắc muốn làm lại bài tập này?')) {
                    resetExercise();
                }
            });
            
            // Continue button
            continueBtn.addEventListener('click', function() {
                // Could navigate to next exercise or back to topic
            });
            
            // Retry button
            retryBtn.addEventListener('click', function() {
                resetExercise();
                resultsModal.hide();
            });
            
            // Hint buttons
            document.querySelectorAll('.hint-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    // The tooltip is already handled by Bootstrap
                });
            });
            
            // Functions
            function updateProgress() {
                const filledCount = completed.filter(Boolean).length;
                const percentage = Math.round((filledCount / fillBlankInputs.length) * 100);
                
                progressBar.style.width = `${percentage}%`;
                progressBar.textContent = `${percentage}%`;
                completedCount.textContent = filledCount;
            }
            
            function resetExercise() {
                fillBlankInputs.forEach((input, index) => {
                    input.value = '';
                    input.disabled = false;
                    input.classList.remove('correct', 'incorrect');
                    input.style.borderColor = '#dee2e6';
                    
                    // Hide feedback
                    const feedbackContainer = input.closest('.fill-blank-item').querySelector('.feedback');
                    const explanation = input.closest('.fill-blank-item').querySelector('.explanation');
                    feedbackContainer.style.display = 'none';
                    explanation.style.display = 'none';
                    
                    completed[index] = false;
                });
                
                // Reset score
                currentScore.textContent = '0';
                
                // Reset progress
                updateProgress();
                
                // Reset timer
                startTime = new Date();
            }
            
            function showResults(correctCount, totalCount, timeInSeconds) {
                const percentage = Math.round((correctCount / totalCount) * 100);
                
                // Update modal content
                scorePercentage.textContent = `${percentage}%`;
                scoreCorrect.textContent = correctCount;
                scoreTotal.textContent = totalCount;
                
                // Set message based on score
                if (percentage >= 80) {
                    scoreMessage.textContent = 'Xuất sắc! Bạn đã nắm vững kiến thức này.';
                } else if (percentage >= 60) {
                    scoreMessage.textContent = 'Tốt! Bạn đã hiểu được phần lớn nội dung.';
                } else if (percentage >= 40) {
                    scoreMessage.textContent = 'Có thể tốt hơn. Hãy ôn tập lại kiến thức.';
                } else {
                    scoreMessage.textContent = 'Cần cố gắng nhiều hơn. Hãy học lại từ đầu.';
                }
                
                // Show modal
                resultsModal.show();
            }
            
            function saveResults(correctCount, totalCount, timeInSeconds) {
                const topicId = @(topic?.ID_CD ?? 0);
                const exerciseType = 'fill-blank';
                
                // Get existing results or initialize new object
                let exerciseResults = JSON.parse(localStorage.getItem('exerciseResults') || '{}');
                
                // Create topic results if it doesn't exist
                if (!exerciseResults[topicId]) {
                    exerciseResults[topicId] = {};
                }
                
                // Save the new result
                exerciseResults[topicId][exerciseType] = {
                    correctCount: correctCount,
                    totalCount: totalCount,
                    percentage: Math.round((correctCount / totalCount) * 100),
                    timeInSeconds: timeInSeconds,
                    date: new Date().toISOString()
                };
                
                // Save to localStorage
                localStorage.setItem('exerciseResults', JSON.stringify(exerciseResults));
            }
            
            function createAnswerHtml(exercise) {
                // Đảm bảo chuyển đổi đúng kiểu dữ liệu - Sử dụng toString() để chuyển đổi
                const optionA = exercise.option_A || "";
                const optionB = exercise.option_B || "";
                const optionC = exercise.option_C || "";
                const optionD = exercise.option_D || "";
                
                const html = `
                    <div class="answer-options mt-3">
                        <div class="option-item d-flex align-items-center mb-2" data-option="A" onclick="checkFillAnswer(${exercise.id_BT}, 'A')">
                            <div class="option-marker">A</div>
                            <div class="option-text">${optionA}</div>
                        </div>
                        <div class="option-item d-flex align-items-center mb-2" data-option="B" onclick="checkFillAnswer(${exercise.id_BT}, 'B')">
                            <div class="option-marker">B</div>
                            <div class="option-text">${optionB}</div>
                        </div>
                        <div class="option-item d-flex align-items-center mb-2" data-option="C" onclick="checkFillAnswer(${exercise.id_BT}, 'C')">
                            <div class="option-marker">C</div>
                            <div class="option-text">${optionC}</div>
                        </div>
                        <div class="option-item d-flex align-items-center mb-2" data-option="D" onclick="checkFillAnswer(${exercise.id_BT}, 'D')">
                            <div class="option-marker">D</div>
                            <div class="option-text">${optionD}</div>
                        </div>
                    </div>
                `;
                return html;
            }
            
            window.checkFillAnswer = function(questionId, selectedOption) {
                const exercise = exercises.find(ex => ex.id_BT === questionId);
                if (!exercise) return;
                
                const isCorrect = (selectedOption === 'A' && exercise.answer_BT.toUpperCase().startsWith('A')) ||
                                 (selectedOption === 'B' && exercise.answer_BT.toUpperCase().startsWith('B')) ||
                                 (selectedOption === 'C' && exercise.answer_BT.toUpperCase().startsWith('C')) ||
                                 (selectedOption === 'D' && exercise.answer_BT.toUpperCase().startsWith('D'));
                
                // Handle the result
            };
        });
    </script>
}

@functions {
    public string CreateSentenceWithBlank(string question)
    {
        // Giữ nguyên câu hỏi vì đã được xử lý trong controller
        return question;
    }
    
    public string GetCorrectAnswer(ExerciseModel exercise)
    {
        // Trích xuất đáp án đúng dựa trên câu hỏi và lựa chọn
        string blankQuestion = exercise.Question_BT;
        
        if (blankQuestion.Contains("[BLANK]"))
        {
            // Sửa lại các case so sánh để sử dụng string thay vì char
            switch (exercise.Answer_BT)
            {
                case "A": return exercise.Option_A;
                case "B": return exercise.Option_B;
                case "C": return exercise.Option_C;
                case "D": return exercise.Option_D;
                default: return "answer";
            }
        }
        
        return "answer";
    }
    
    public string GetHint(ExerciseModel exercise)
    {
        // Lấy đáp án đúng
        string correctAnswer = GetCorrectAnswer(exercise);
        
        // Tạo gợi ý dựa trên chữ cái đầu tiên và độ dài
        if (!string.IsNullOrEmpty(correctAnswer))
        {
            return $"Từ này bắt đầu bằng chữ '{correctAnswer[0]}' và có {correctAnswer.Length} chữ cái";
        }
        
        return "Không có gợi ý";
    }
}
