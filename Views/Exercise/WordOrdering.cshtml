@model List<ExerciseModel>
@{
    ViewData["Title"] = "Sắp xếp câu - " + ViewBag.Topic?.Name_CD ?? "Chủ đề";
    var topic = ViewBag.Topic as TopicModel;
}

<!-- Header Section -->
<div class="container mt-5">
    <div class="row mb-4">
        <div class="col-md-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Trang chủ</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Exercise")">Bài tập</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Topic", "Exercise", new { id = topic?.ID_CD })">@(topic?.Name_CD ?? "Chủ đề")</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Sắp xếp câu</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Title and Instructions -->
    <div class="row mb-5">
        <div class="col-md-8">
            <h1 class="display-5 fw-bold mb-3">Sắp xếp câu: @(topic?.Name_CD ?? "Chủ đề")</h1>
            <p class="lead">Sắp xếp các từ để tạo thành câu có nghĩa. Luyện tập cấu trúc ngữ pháp và từ vựng.</p>
            <div class="card bg-light mb-4">
                <div class="card-body">
                    <h5 class="card-title"><i class="fas fa-lightbulb text-warning me-2"></i>Hướng dẫn</h5>
                    <ul class="mb-0">
                        <li>Nhấp vào các từ theo đúng thứ tự để tạo thành câu hoàn chỉnh</li>
                        <li>Chú ý đến cấu trúc ngữ pháp và trật tự từ trong câu tiếng Anh</li>
                        <li>Có thể nhấp vào từ đã chọn để đưa nó trở lại danh sách từ</li>
                        <li>Nhấn "Kiểm tra" khi bạn đã hoàn thành tất cả các câu</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <div class="progress-container bg-light p-3 rounded shadow-sm">
                <h5 class="mb-3">Tiến độ</h5>
                <div class="progress mb-2" style="height: 25px;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" id="progress-bar">
                        0%
                    </div>
                </div>
                <p class="text-center mb-0">
                    <span id="completed-count">0</span>/<span id="total-count">@Model.Count</span> câu
                </p>
            </div>
        </div>
    </div>

    <!-- Word Ordering Exercise -->
    <div class="row">
        <div class="col-lg-9">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <form id="word-ordering-form">
                        @foreach (var (exercise, index) in Model.Select((ex, i) => (ex, i + 1)))
                        {
                            <div class="word-ordering-item mb-5" id="order-item-@index" data-correct-sentence="@GetCorrectSentence(exercise)">
                                <h5 class="mb-3">@index. Sắp xếp các từ sau thành một câu có nghĩa:</h5>
                                
                                <div class="word-bank mb-3 p-3 border rounded bg-light" id="word-bank-@index">
                                    @foreach (var word in GetShuffledWords(exercise))
                                    {
                                        <span class="word-item badge bg-white text-dark border m-1 px-3 py-2" data-word="@word">@word</span>
                                    }
                                </div>
                                
                                <div class="answer-area mb-3 p-3 border rounded" id="answer-area-@index">
                                    <p class="text-muted text-center mb-0 empty-message">Nhấp vào các từ ở trên để tạo câu</p>
                                </div>
                                
                                <div class="feedback mt-2" style="display: none;">
                                    <div class="correct-feedback text-success" style="display: none;">
                                        <i class="fas fa-check-circle me-1"></i> Chính xác! Câu của bạn đã đúng.
                                    </div>
                                    <div class="incorrect-feedback text-danger" style="display: none;">
                                        <i class="fas fa-times-circle me-1"></i> Chưa đúng! Câu đúng là: <strong class="correct-answer"></strong>
                                    </div>
                                </div>
                                
                                <div class="explanation text-muted mt-2 fst-italic" style="display: none;">
                                    <i class="fas fa-info-circle me-1"></i> @exercise.Explanation_BT
                                </div>
                                
                                <div class="d-flex justify-content-between mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-secondary reset-sentence-btn" data-index="@index">
                                        <i class="fas fa-redo me-1"></i> Làm lại câu này
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-info" data-bs-toggle="collapse" data-bs-target="#hint-@index">
                                        <i class="fas fa-lightbulb me-1"></i> Gợi ý
                                    </button>
                                </div>
                                
                                <div class="collapse mt-2" id="hint-@index">
                                    <div class="card card-body bg-light">
                                        <p class="mb-0">Thứ tự câu tiếng Anh thường là: <strong>Chủ ngữ + Động từ + Đối tượng</strong></p>
                                    </div>
                                </div>
                            </div>
                            
                            @if (index < Model.Count)
                            {
                                <hr class="my-4">
                            }
                        }
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" class="btn btn-primary" id="check-answers-btn">
                                <i class="fas fa-check me-1"></i> Kiểm tra
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="reset-btn">
                                <i class="fas fa-redo me-1"></i> Làm lại tất cả
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body p-4">
                    <h5 class="card-title mb-3"><i class="fas fa-info-circle text-primary me-2"></i>Thông tin</h5>
                    
                    <p>Bài tập sắp xếp câu giúp bạn:</p>
                    <ul>
                        <li>Hiểu cấu trúc câu trong tiếng Anh</li>
                        <li>Học cách sắp xếp từ theo đúng ngữ pháp</li>
                        <li>Nhận biết các mẫu câu thông dụng</li>
                    </ul>
                    
                    <hr />
                    
                    <h6 class="mb-2">Điểm của bạn</h6>
                    <div class="score-display p-2 bg-light rounded mb-3 text-center">
                        <span id="current-score" class="fs-4 fw-bold">0</span>/<span id="max-score">@Model.Count</span>
                    </div>
                    
                    <div class="tips bg-primary-soft p-3 rounded">
                        <h6 class="mb-2">Mẹo làm bài</h6>
                        <p class="small mb-0">Trật tự từ trong câu tiếng Anh thường là: Chủ ngữ (Subject) + Động từ (Verb) + Tân ngữ (Object) + Trạng ngữ (Adverbial)</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Modal -->
    <div class="modal fade" id="resultsModal" tabindex="-1" aria-labelledby="resultsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resultsModalLabel">Kết quả bài tập</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <div class="score-circle mb-3">
                            <span id="score-percentage">0%</span>
                        </div>
                        <h4><span id="score-correct">0</span>/<span id="score-total">@Model.Count</span> câu đúng</h4>
                        <p id="score-message">Hãy cố gắng hơn!</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="continue-btn">Tiếp tục</button>
                    <button type="button" class="btn btn-success" id="retry-btn">Làm lại</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .word-bank {
        min-height: 60px;
        transition: all 0.3s;
    }
    
    .word-bank.correct {
        background-color: #d1e7dd !important;
        border-color: #a3cfbb !important;
    }
    
    .word-bank.incorrect {
        background-color: #f8d7da !important;
        border-color: #f5c2c7 !important;
    }
    
    .answer-area {
        min-height: 60px;
        background-color: #f8f9fa;
        transition: all 0.3s;
    }
    
    .word-item {
        display: inline-block;
        cursor: pointer;
        transition: all 0.2s;
        font-weight: normal;
        font-size: 1rem;
    }
    
    .word-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .empty-message {
        font-style: italic;
    }
    
    .score-circle {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        border: 10px solid #0d6efd;
    }
    
    .score-circle span {
        font-size: 2.5rem;
        font-weight: bold;
    }
    
    .bg-primary-soft {
        background-color: #cfe2ff;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get DOM elements
            const progressBar = document.getElementById('progress-bar');
            const completedCount = document.getElementById('completed-count');
            const totalCount = document.getElementById('total-count');
            const currentScore = document.getElementById('current-score');
            const maxScore = document.getElementById('max-score');
            const checkAnswersBtn = document.getElementById('check-answers-btn');
            const resetBtn = document.getElementById('reset-btn');
            const resultsModal = new bootstrap.Modal(document.getElementById('resultsModal'));
            const scorePercentage = document.getElementById('score-percentage');
            const scoreCorrect = document.getElementById('score-correct');
            const scoreTotal = document.getElementById('score-total');
            const scoreMessage = document.getElementById('score-message');
            const continueBtn = document.getElementById('continue-btn');
            const retryBtn = document.getElementById('retry-btn');
            
            // Variables
            let startTime = new Date();
            let completed = new Array(@Model.Count).fill(false);
            
            // Set up the word ordering exercise
            setupWordOrdering();
            
            // Event listeners for check answers and reset buttons
            checkAnswersBtn.addEventListener('click', checkAnswers);
            resetBtn.addEventListener('click', function() {
                if (confirm('Bạn có chắc muốn làm lại tất cả các câu?')) {
                    resetExercise();
                }
            });
            
            // Event listeners for retry and continue buttons in results modal
            retryBtn.addEventListener('click', function() {
                resetExercise();
                resultsModal.hide();
            });
            
            continueBtn.addEventListener('click', function() {
                // Could navigate to next exercise or back to topic
            });
            
            // Event listeners for reset sentence buttons
            document.querySelectorAll('.reset-sentence-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = this.getAttribute('data-index');
                    resetSentence(index);
                });
            });
            
            // Function to set up word ordering exercise
            function setupWordOrdering() {
                const wordBanks = document.querySelectorAll('.word-bank');
                const answerAreas = document.querySelectorAll('.answer-area');
                
                // Set up each word bank and answer area
                wordBanks.forEach((wordBank, index) => {
                    const answerArea = answerAreas[index];
                    
                    // Get all word items in the word bank
                    const wordItems = wordBank.querySelectorAll('.word-item');
                    
                    // Add click event to each word item
                    wordItems.forEach(wordItem => {
                        wordItem.addEventListener('click', function() {
                            // Move word from word bank to answer area
                            const clone = this.cloneNode(true);
                            this.style.display = 'none';
                            
                            // Add click event to the cloned word to move it back to word bank
                            clone.addEventListener('click', function() {
                                // Find the original word item and show it
                                const word = this.getAttribute('data-word');
                                const originalWord = wordBank.querySelector(`.word-item[data-word="${word}"]`);
                                if (originalWord) {
                                    originalWord.style.display = 'inline-block';
                                }
                                
                                // Remove the cloned word
                                this.remove();
                                
                                // Show/hide empty message
                                updateEmptyMessage(answerArea);
                                
                                // Update completed status
                                updateCompletedStatus(index, answerArea);
                            });
                            
                            // Add the cloned word to the answer area
                            answerArea.appendChild(clone);
                            
                            // Hide empty message
                            updateEmptyMessage(answerArea);
                            
                            // Update completed status
                            updateCompletedStatus(index, answerArea);
                        });
                    });
                });
            }
            
            // Function to update empty message visibility
            function updateEmptyMessage(answerArea) {
                const emptyMessage = answerArea.querySelector('.empty-message');
                if (emptyMessage) {
                    // Show message if no words in answer area
                    const wordItems = answerArea.querySelectorAll('.word-item');
                    emptyMessage.style.display = wordItems.length === 0 ? 'block' : 'none';
                }
            }
            
            // Function to update completed status
            function updateCompletedStatus(index, answerArea) {
                // Check if all words have been moved to the answer area
                const wordBank = document.getElementById(`word-bank-${index}`);
                const visibleWordItems = Array.from(wordBank.querySelectorAll('.word-item')).filter(item => item.style.display !== 'none');
                
                // Mark as completed if all words have been moved
                completed[index] = visibleWordItems.length === 0;
                
                // Update progress
                updateProgress();
            }
            
            // Function to update progress
            function updateProgress() {
                const completedCount = completed.filter(Boolean).length;
                const percentage = Math.round((completedCount / completed.length) * 100);
                
                progressBar.style.width = `${percentage}%`;
                progressBar.textContent = `${percentage}%`;
                document.getElementById('completed-count').textContent = completedCount;
            }
            
            // Function to check answers
            function checkAnswers() {
                // Check if all sentences are completed
                if (!completed.every(Boolean)) {
                    alert('Vui lòng hoàn thành tất cả các câu trước khi kiểm tra!');
                    return;
                }
                
                let correctCount = 0;
                
                // Check each sentence
                document.querySelectorAll('.word-ordering-item').forEach((item, index) => {
                    const answerArea = document.getElementById(`answer-area-${index}`);
                    const feedbackContainer = item.querySelector('.feedback');
                    const correctFeedback = feedbackContainer.querySelector('.correct-feedback');
                    const incorrectFeedback = feedbackContainer.querySelector('.incorrect-feedback');
                    const explanation = item.querySelector('.explanation');
                    
                    // Get user's answer
                    const wordItems = answerArea.querySelectorAll('.word-item');
                    const userSentence = Array.from(wordItems).map(item => item.getAttribute('data-word')).join(' ');
                    
                    // Get correct answer
                    const correctSentence = item.getAttribute('data-correct-sentence');
                    
                    // Show feedback
                    feedbackContainer.style.display = 'block';
                    explanation.style.display = 'block';
                    
                    // Check if answer is correct
                    if (userSentence.toLowerCase() === correctSentence.toLowerCase()) {
                        correctFeedback.style.display = 'block';
                        incorrectFeedback.style.display = 'none';
                        answerArea.classList.add('correct');
                        correctCount++;
                    } else {
                        correctFeedback.style.display = 'none';
                        incorrectFeedback.style.display = 'block';
                        incorrectFeedback.querySelector('.correct-answer').textContent = correctSentence;
                        answerArea.classList.add('incorrect');
                    }
                    
                    // Disable word items
                    wordItems.forEach(item => {
                        item.style.pointerEvents = 'none';
                    });
                });
                
                // Update score
                currentScore.textContent = correctCount;
                
                // Calculate time spent
                const endTime = new Date();
                const timeDiff = Math.floor((endTime - startTime) / 1000); // in seconds
                
                // Show results modal
                showResults(correctCount, completed.length, timeDiff);
                
                // Save results
                saveResults(correctCount, completed.length, timeDiff);
            }
            
            // Function to reset a specific sentence
            function resetSentence(index) {
                const wordBank = document.getElementById(`word-bank-${index}`);
                const answerArea = document.getElementById(`answer-area-${index}`);
                
                // Show all words in word bank
                wordBank.querySelectorAll('.word-item').forEach(item => {
                    item.style.display = 'inline-block';
                });
                
                // Remove all words from answer area
                const wordItems = answerArea.querySelectorAll('.word-item');
                wordItems.forEach(item => item.remove());
                
                // Show empty message
                const emptyMessage = answerArea.querySelector('.empty-message');
                if (emptyMessage) {
                    emptyMessage.style.display = 'block';
                }
                
                // Reset completed status
                completed[index] = false;
                
                // Update progress
                updateProgress();
                
                // Reset feedback
                const feedbackContainer = document.querySelector(`#order-item-${index} .feedback`);
                const explanation = document.querySelector(`#order-item-${index} .explanation`);
                if (feedbackContainer) feedbackContainer.style.display = 'none';
                if (explanation) explanation.style.display = 'none';
                
                // Reset answer area styling
                answerArea.classList.remove('correct', 'incorrect');
            }
            
            // Function to reset the entire exercise
            function resetExercise() {
                // Reset each sentence
                for (let i = 0; i < completed.length; i++) {
                    resetSentence(i);
                }
                
                // Reset score
                currentScore.textContent = '0';
                
                // Reset timer
                startTime = new Date();
            }
            
            // Function to show results
            function showResults(correctCount, totalCount, timeInSeconds) {
                const percentage = Math.round((correctCount / totalCount) * 100);
                
                // Update modal content
                scorePercentage.textContent = `${percentage}%`;
                scoreCorrect.textContent = correctCount;
                scoreTotal.textContent = totalCount;
                
                // Set message based on score
                if (percentage >= 80) {
                    scoreMessage.textContent = 'Xuất sắc! Bạn đã nắm vững kiến thức này.';
                } else if (percentage >= 60) {
                    scoreMessage.textContent = 'Tốt! Bạn đã hiểu được phần lớn nội dung.';
                } else if (percentage >= 40) {
                    scoreMessage.textContent = 'Có thể tốt hơn. Hãy ôn tập lại kiến thức.';
                } else {
                    scoreMessage.textContent = 'Cần cố gắng nhiều hơn. Hãy học lại từ đầu.';
                }
                
                // Show modal
                resultsModal.show();
            }
            
            // Function to save results
            function saveResults(correctCount, totalCount, timeInSeconds) {
                const topicId = @(topic?.ID_CD ?? 0);
                const exerciseType = 'word-ordering';
                
                // Get existing results or initialize new object
                let exerciseResults = JSON.parse(localStorage.getItem('exerciseResults') || '{}');
                
                // Create topic results if it doesn't exist
                if (!exerciseResults[topicId]) {
                    exerciseResults[topicId] = {};
                }
                
                // Save the new result
                exerciseResults[topicId][exerciseType] = {
                    correctCount: correctCount,
                    totalCount: totalCount,
                    percentage: Math.round((correctCount / totalCount) * 100),
                    timeInSeconds: timeInSeconds,
                    date: new Date().toISOString()
                };
                
                // Save to localStorage
                localStorage.setItem('exerciseResults', JSON.stringify(exerciseResults));
            }
        });
    </script>
}

@functions {
    public string GetCorrectSentence(ExerciseModel exercise)
    {
        // Lấy câu đúng từ câu hỏi
        return exercise.Question_BT;
    }
    
    public List<string> GetShuffledWords(ExerciseModel exercise)
    {
        // Tách từng từ trong câu và trộn ngẫu nhiên
        var words = exercise.Question_BT.Split(' ').ToList();
        
        // Trộn ngẫu nhiên từ
        Random rng = new Random();
        int n = words.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            string value = words[k];
            words[k] = words[n];
            words[n] = value;
        }
        
        return words;
    }
}
