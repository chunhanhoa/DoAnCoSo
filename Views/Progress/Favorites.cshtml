@using TiengAnh.Extensions
@{
    ViewData["Title"] = "Mục yêu thích";
    var vocabularies = ViewBag.Vocabularies as List<VocabularyModel>;
    var grammars = ViewBag.Grammars as List<GrammarModel>;
}

<div class="container mt-5">
    <form id="antiforgeryForm">
        @Html.AntiForgeryToken()
    </form>
    
    <div class="row mb-4">
        <div class="col-md-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Trang chủ</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Mục yêu thích</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12 text-center">
            <div class="favorites-header">
                <i class="fas fa-heart text-danger favorites-icon mb-3"></i>
                <h1 class="display-5 fw-bold mb-3">Danh sách yêu thích</h1>
                <p class="lead">Các từ vựng và bài học bạn đã đánh dấu yêu thích</p>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8 col-lg-6 mx-auto">
            <ul class="nav nav-pills nav-fill favorites-tabs" id="favoritesTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="vocabulary-tab" data-bs-toggle="tab" data-bs-target="#vocabulary" type="button" role="tab" aria-controls="vocabulary" aria-selected="true">
                        <i class="fas fa-book me-2"></i> Từ vựng
                        @if (vocabularies != null && vocabularies.Any())
                        {
                            <span class="badge bg-primary ms-2" id="vocabulary-count">@vocabularies.Count</span>
                        }
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="grammar-tab" data-bs-toggle="tab" data-bs-target="#grammar" type="button" role="tab" aria-controls="grammar" aria-selected="false">
                        <i class="fas fa-pen me-2"></i> Ngữ pháp
                        @if (grammars != null && grammars.Any())
                        {
                            <span class="badge bg-primary ms-2" id="grammar-count">@grammars.Count</span>
                        }
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <div class="tab-content" id="favoritesTabContent">
        <div class="tab-pane fade show active" id="vocabulary" role="tabpanel" aria-labelledby="vocabulary-tab">
            @if (vocabularies != null && vocabularies.Any())
            {
                <div class="row g-4">
                    @foreach (var vocab in vocabularies)
                    {
                        <div class="col-lg-6 favorite-item" data-item-id="@vocab.ID_TV" data-type="vocabulary">
                            <div class="card border-0 shadow-sm h-100 vocabulary-card">
                                <div class="card-body p-0">
                                    <div class="row g-0">
                                        <div class="col-md-4 vocab-image-container">
                                            <img src="@vocab.Image_TV" alt="@vocab.Word_TV" class="vocabulary-img"
                                                 onerror="this.src='/images/vocabulary/default.jpg';this.onerror='';">
                                            <span class="level-badge level-@vocab.Level_TV">@vocab.Level_TV</span>
                                        </div>
                                        <div class="col-md-8">
                                            <div class="p-3 vocabulary-content">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h3 class="vocabulary-title mb-1">@vocab.Word_TV</h3>
                                                    <button class="audio-btn" data-word="@vocab.Word_TV" title="Phát âm">
                                                        <i class="fas fa-volume-up"></i>
                                                    </button>
                                                </div>
                                                
                                                <span class="part-of-speech mb-2">@Html.GetPartOfSpeechName(vocab.PartOfSpeech)</span>
                                                
                                                <p class="vocabulary-translation mb-2">
                                                    <span class="meaning-label">Nghĩa:</span> @vocab.Meaning_TV
                                                </p>
                                                
                                                <p class="example text-muted mb-3">
                                                    <i class="fas fa-quote-left text-primary-soft me-1 opacity-50"></i>
                                                    @vocab.Example_TV
                                                </p>
                                                
                                                <div class="action-buttons">
                                                    <a href="@Url.Action("Details", "Vocabulary", new { id = vocab.ID_TV })" class="btn btn-primary">
                                                        <i class="fas fa-book-open me-1"></i> Chi tiết
                                                    </a>
                                                    <button class="btn btn-sm btn-danger remove-favorite-btn" data-id="@vocab.ID_TV" data-type="vocabulary" title="Bỏ yêu thích">
                                                        <i class="fas fa-heart-broken"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-heart text-muted empty-icon mb-3"></i>
                    <h4>Chưa có từ vựng yêu thích</h4>
                    <p class="text-muted">Hãy nhấn vào biểu tượng trái tim để thêm từ vựng vào danh sách yêu thích của bạn.</p>
                    <a href="@Url.Action("Index", "Vocabulary")" class="btn btn-primary mt-2">
                        <i class="fas fa-search me-2"></i> Khám phá từ vựng
                    </a>
                </div>
            }
        </div>

        <div class="tab-pane fade" id="grammar" role="tabpanel" aria-labelledby="grammar-tab">
            @if (grammars != null && grammars.Any())
            {
                <div class="row g-4">
                    @foreach (var grammar in grammars)
                    {
                        <div class="col-lg-6 favorite-item" data-item-id="@grammar.ID_NP" data-type="grammar">
                            <div class="card border-0 shadow-sm h-100 grammar-card">
                                <div class="card-body p-4">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <span class="grammar-level level-badge level-@grammar.Level">@grammar.Level</span>
                                        <button class="btn btn-sm btn-danger remove-favorite-btn" data-id="@grammar.ID_NP" data-type="grammar" title="Bỏ yêu thích">
                                            <i class="fas fa-heart-broken"></i>
                                        </button>
                                    </div>
                                    
                                    <h3 class="grammar-title mb-3">@grammar.Title_NP</h3>
                                    <p class="grammar-description mb-3">@grammar.Description_NP</p>
                                    
                                    <div class="grammar-meta mb-3">
                                        <span class="grammar-topic">
                                            <i class="fas fa-bookmark me-1 text-primary-soft"></i> @grammar.TopicName
                                        </span>
                                        <span class="grammar-date">
                                            <i class="far fa-calendar-alt me-1 text-primary-soft"></i> @grammar.TimeUpload_NP.ToString("dd/MM/yyyy")
                                        </span>
                                    </div>
                                    
                                    <div class="action-buttons">
                                        <a href="@Url.Action("Details", "Grammar", new { id = grammar.ID_NP })" class="btn btn-primary w-100">
                                            <i class="fas fa-book-open me-2"></i> Xem chi tiết
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-heart text-muted empty-icon mb-3"></i>
                    <h4>Chưa có bài ngữ pháp yêu thích</h4>
                    <p class="text-muted">Hãy nhấn vào biểu tượng trái tim để thêm bài ngữ pháp vào danh sách yêu thích của bạn.</p>
                    <a href="@Url.Action("Index", "Grammar")" class="btn btn-primary mt-2">
                        <i class="fas fa-search me-2"></i> Khám phá ngữ pháp
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Biến trạng thái để ngăn lặp âm thanh
            let isPlaying = false;

            // Thêm xử lý cho nút bỏ yêu thích
            document.querySelectorAll('.remove-favorite-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const id = this.getAttribute('data-id');
                    const type = this.getAttribute('data-type');
                    const card = this.closest('.favorite-item');
                    
                    let token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (!token) {
                        const form = document.createElement('form');
                        form.innerHTML = '@Html.AntiForgeryToken()';
                        document.body.appendChild(form);
                        token = document.querySelector('input[name="__RequestVerificationToken"]');
                    }
                    
                    fetch(`/Progress/RemoveFavorite/${id}?type=${type}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': token ? token.value : ''
                        },
                        credentials: 'same-origin'
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            card.style.opacity = '0';
                            card.style.transform = 'scale(0.8)';
                            card.style.transition = 'opacity 0.5s, transform 0.5s';
                            
                            setTimeout(() => {
                                card.remove();
                                
                                const remainingItems = document.querySelectorAll(`.favorite-item[data-type="${type}"]`);
                                if (remainingItems.length === 0) {
                                    const emptyMessage = `
                                        <div class="empty-state">
                                            <i class="fas fa-heart text-muted empty-icon mb-3"></i>
                                            <h4>Chưa có ${type === 'vocabulary' ? 'từ vựng' : 'bài ngữ pháp'} yêu thích</h4>
                                            <p class="text-muted">Hãy nhấn vào biểu tượng trái tim để thêm ${type === 'vocabulary' ? 'từ vựng' : 'bài ngữ pháp'} vào danh sách yêu thích của bạn.</p>
                                            <a href="/${type === 'vocabulary' ? 'Vocabulary' : 'Grammar'}" class="btn btn-primary mt-2">
                                                <i class="fas fa-search me-2"></i> Khám phá ${type === 'vocabulary' ? 'từ vựng' : 'ngữ pháp'}
                                            </a>
                                        </div>`;
                                    document.querySelector(`#${type}`).innerHTML = emptyMessage;
                                }
                                
                                updateFavoriteCount(type);
                            }, 500);
                            
                            showNotification(data.message, 'info');
                        } else {
                            showNotification(data.message, 'warning');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showNotification('Đã xảy ra lỗi. Vui lòng thử lại sau.', 'danger');
                    });
                });
            });
            
            // Xử lý phát âm thanh
            document.querySelectorAll('.audio-btn').forEach(btn => {
                // Gỡ bỏ mọi trình xử lý sự kiện cũ
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                newBtn.addEventListener('click', function() {
                    if (isPlaying) return; // Ngăn gọi nếu đang phát
                    const word = this.getAttribute('data-word');
                    console.log('Audio button clicked:', word); // Debug
                    playVocabAudio(word, this);
                });
            });
            
            function playVocabAudio(word, button) {
                if (isPlaying) return;
                isPlaying = true;
                
                const audioUrl = `https://ssl.gstatic.com/dictionary/static/sounds/oxford/${word.toLowerCase()}--_us_1.mp3`;
                window.currentAudio = new Audio(audioUrl);
                
                button.classList.add('playing');
                
                window.currentAudio.onended = function() {
                    button.classList.remove('playing');
                    isPlaying = false;
                    console.log('Audio ended:', word); // Debug
                };
                
                window.currentAudio.onerror = function(e) {
                    button.classList.remove('playing');
                    isPlaying = false;
                    showNotification(`Không thể phát âm thanh cho từ: ${word}`, 'warning');
                    console.error('Lỗi phát âm thanh:', e);
                };
                
                window.currentAudio.play().catch(e => {
                    button.classList.remove('playing');
                    isPlaying = false;
                    showNotification(`Không thể phát âm thanh cho từ: ${word}`, 'warning');
                    console.error('Lỗi phát âm thanh:', e);
                });
            }
            
            function updateFavoriteCount(type) {
                const count = document.querySelectorAll(`.favorite-item[data-type="${type}"]`).length;
                const countElement = document.querySelector(`#${type}-count`);
                if (countElement) {
                    countElement.textContent = count;
                    if (count === 0) {
                        countElement.style.display = 'none';
                    }
                }
            }
            
            function showNotification(message, type) {
                const notif = document.createElement('div');
                notif.className = `alert alert-${type} position-fixed`;
                notif.style.top = '20px';
                notif.style.right = '20px';
                notif.style.zIndex = '9999';
                notif.style.minWidth = '300px';
                notif.style.padding = '15px';
                notif.style.boxShadow = '0 0.5rem 1rem rgba(0,0,0,0.15)';
                notif.innerHTML = message;
                
                document.body.appendChild(notif);
                
                setTimeout(() => {
                    notif.style.opacity = '0';
                    notif.style.transition = 'opacity 0.5s';
                    setTimeout(() => {
                        document.body.removeChild(notif);
                    }, 500);
                }, 3000);
            }
        });
    </script>
}

@section Styles {
    <style>
        .favorites-header {
            padding: 2rem 0;
        }
        
        .favorites-icon {
            font-size: 3rem;
            animation: pulse 1.5s infinite ease-in-out alternate;
        }
        
        @@keyframes pulse {
            from { transform: scale(1); }
            to { transform: scale(1.1); }
        }
        
        .favorites-tabs {
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            border-radius: 15px;
            overflow: hidden;
        }
        
        .favorites-tabs .nav-link {
            padding: 15px;
            border-radius: 0;
            font-weight: 600;
            transition: all 0.3s;
        }
        
        .favorites-tabs .nav-link.active {
            background-color: #4e73fa;
        }
        
        .favorites-tabs .nav-link:hover:not(.active) {
            background-color: #f8f9fa;
        }
        
        .favorite-item {
            transition: all 0.3s ease;
        }
        
        .favorite-item.removing {
            transform: scale(0.8);
            opacity: 0;
        }
        
        .vocabulary-card {
            border-radius: 15px;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .vocabulary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
        }
        
        .vocab-image-container {
            position: relative;
            height: 100%;
            min-height: 200px;
            background-color: #f8f9fa;
            overflow: hidden;
        }
        
        .vocabulary-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .level-badge {
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 5px 10px;
            border-radius: 30px;
            font-weight: 600;
            font-size: 0.75rem;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .level-A1 { color: #198754; border: 1px solid #198754; }
        .level-A2 { color: #0d6efd; border: 1px solid #0d6efd; }
        .level-B1 { color: #fd7e14; border: 1px solid #fd7e14; }
        .level-B2 { color: #dc3545; border: 1px solid #dc3545; }
        
        .vocabulary-content {
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .vocabulary-title {
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .part-of-speech {
            display: inline-block;
            font-size: 0.8rem;
            color: #6c757d;
            padding: 2px 8px;
            background-color: #f8f9fa;
            border-radius: 15px;
            margin-bottom: 10px;
        }
        
        .meaning-label {
            font-weight: 600;
        }
        
        .example {
            font-style: italic;
            font-size: 0.9rem;
            border-left: 3px solid rgba(78, 115, 250, 0.2);
            padding-left: 10px;
        }
        
        .action-buttons {
            margin-top: auto;
            display: flex;
            gap: 10px;
        }
        
        .audio-btn {
            background: none;
            border: none;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: #f8f9fa;
            transition: all 0.3s;
            cursor: pointer;
        }
        
        .audio-btn:hover {
            background-color: #4e73fa;
            color: white;
        }
        
        .audio-btn.playing {
            animation: pulse-audio 1s infinite;
            color: #4e73fa;
        }
        
        @@keyframes pulse-audio {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        .grammar-card {
            border-radius: 15px;
            overflow: hidden;
            height: 100%;
            transition: all 0.3s ease;
        }
        
        .grammar-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
        }
        
        .grammar-title {
            font-size: 1.3rem;
            font-weight: 700;
        }
        
        .grammar-description {
            color: #6c757d;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .grammar-meta {
            display: flex;
            gap: 20px;
            font-size: 0.9rem;
            color: #6c757d;
        }
        
        .text-primary-soft {
            color: #4e73fa;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
        }
        
        .empty-icon {
            font-size: 4rem;
            opacity: 0.3;
        }
        
        @@media (max-width: 768px) {
            .action-buttons {
                flex-direction: column;
            }
            
            .vocabulary-content {
                padding-bottom: 20px;
            }
            
            .vocab-image-container {
                min-height: 150px;
            }
        }
    </style>
}

@functions {
    public string GetPartOfSpeechName(string code)
    {
        Dictionary<string, string> types = new Dictionary<string, string>
        {
            { "n", "Danh từ (Noun)" },
            { "v", "Động từ (Verb)" },
            { "adj", "Tính từ (Adjective)" },
            { "adv", "Trạng từ (Adverb)" },
            { "prep", "Giới từ (Preposition)" },
            { "conj", "Liên từ (Conjunction)" },
            { "pron", "Đại từ (Pronoun)" },
            { "det", "Hạn định từ (Determiner)" },
            { "interj", "Thán từ (Interjection)" }
        };
        
        return types.ContainsKey(code) ? types[code] : code;
    }
}