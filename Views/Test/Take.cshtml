@model TiengAnh.Models.TestModel
@{
    ViewData["Title"] = "Làm bài kiểm tra " + Model.Title;
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-lg-9">
            <!-- Test header -->
            <div class="card mb-4 shadow-sm">
                <div class="card-body">
                    <h1 class="h3">@Model.Title</h1>
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge bg-primary me-2">@Model.Level</span>
                            <span class="badge bg-info">@Model.Category</span>
                        </div>
                        <div id="test-timer" class="h5 mb-0">
                            <i class="bi bi-clock"></i> <span id="time-remaining">@Model.Duration:00</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Test content -->
            <div class="card shadow-sm">
                <div class="card-body">
                    <div id="test-progress" class="mb-4">
                        <div class="progress" style="height: 10px;">
                            <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="d-flex justify-content-between mt-1">
                            <small id="progress-text">Câu 1/@Model.Questions.Count</small>
                            <small id="progress-percentage">0%</small>
                        </div>
                    </div>

                    <form id="test-form">
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            var question = Model.Questions[i];
                            var questionNumber = i + 1;
                            
                            <div class="test-question @(questionNumber > 1 ? "d-none" : "")" id="question-@questionNumber">
                                <h5 class="card-title">Câu @questionNumber: @question.QuestionText</h5>
                                
                                <div class="test-options mt-4">
                                    @for (int j = 0; j < question.Options.Count; j++)
                                    {
                                        <div class="form-check test-option mb-3">
                                            <input class="form-check-input" type="radio" name="question-@questionNumber" id="q@(questionNumber)-option@(j)" value="@j">
                                            <label class="form-check-label" for="q@(questionNumber)-option@(j)">
                                                @question.Options[j]
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        
                        <div class="d-flex justify-content-between mt-4">
                            <button type="button" id="prevBtn" class="btn btn-outline-secondary" disabled>
                                <i class="bi bi-arrow-left"></i> Câu trước
                            </button>
                            <button type="button" id="nextBtn" class="btn btn-primary">
                                Câu tiếp theo <i class="bi bi-arrow-right"></i>
                            </button>
                            <button type="button" id="submitBtn" class="btn btn-success d-none">
                                Nộp bài
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <!-- Question navigation -->
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Danh sách câu hỏi</h5>
                    <div class="question-nav d-flex flex-wrap gap-2 mt-3">
                        @for (int i = 1; i <= Model.Questions.Count; i++)
                        {
                            <button class="btn btn-sm btn-outline-secondary question-nav-btn" data-question="@i">@i</button>
                        }
                    </div>
                    
                    <div class="mt-4">
                        <div class="d-flex align-items-center mb-2">
                            <div class="badge bg-success me-2"> </div>
                            <small>Đã trả lời</small>
                        </div>
                        <div class="d-flex align-items-center mb-2">
                            <div class="badge bg-secondary me-2"> </div>
                            <small>Chưa trả lời</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="badge bg-primary me-2"> </div>
                            <small>Đang xem</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card shadow-sm mt-3">
                <div class="card-body">
                    <button id="finalSubmitBtn" class="btn btn-danger w-100">
                        <i class="bi bi-check2-circle"></i> Nộp bài kiểm tra
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize test variables
            let currentQuestion = 1;
            let totalQuestions = @Model.Questions.Count;
            let timeLeft = @Model.Duration * 60; // Convert minutes to seconds
            let answeredQuestions = new Set();
            let timerInterval;

            // Function to show a specific question
            function showQuestion(questionNum) {
                $('.test-question').addClass('d-none');
                $(`#question-${questionNum}`).removeClass('d-none');
                
                // Update navigation buttons
                $('#prevBtn').prop('disabled', questionNum === 1);
                
                if (questionNum === totalQuestions) {
                    $('#nextBtn').addClass('d-none');
                    $('#submitBtn').removeClass('d-none');
                } else {
                    $('#nextBtn').removeClass('d-none');
                    $('#submitBtn').addClass('d-none');
                }
                
                // Update question navigation highlighting
                $('.question-nav-btn').removeClass('btn-primary');
                $(`.question-nav-btn[data-question="${questionNum}"]`).addClass('btn-primary');
                
                // Update progress text
                $('#progress-text').text(`Câu ${questionNum}/${totalQuestions}`);
                
                // Current question becomes the global current question
                currentQuestion = questionNum;
            }

            // Function to update progress bar
            function updateProgressBar() {
                const progress = (answeredQuestions.size / totalQuestions) * 100;
                $('#progress-bar').css('width', `${progress}%`);
                $('#progress-percentage').text(`${Math.round(progress)}%`);
            }

            // Start the timer
            function startTimer() {
                timerInterval = setInterval(function() {
                    timeLeft--;
                    
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    
                    $('#time-remaining').text(`${minutes}:${seconds < 10 ? '0' : ''}${seconds}`);
                    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        alert('Hết thời gian! Bài kiểm tra của bạn sẽ được nộp tự động.');
                        submitTest();
                    }
                }, 1000);
            }

            // Function to handle submitting the test
            function submitTest() {
                clearInterval(timerInterval);
                
                // Get answers
                const answers = [];
                for (let i = 1; i <= totalQuestions; i++) {
                    const selectedOption = $(`input[name="question-${i}"]:checked`).val();
                    answers.push({
                        questionId: i,
                        selectedOption: selectedOption !== undefined ? parseInt(selectedOption) : -1
                    });
                }
                
                // Calculate score
                let correctCount = 0;
                const correctAnswers = @Html.Raw(Json.Serialize(Model.Questions.Select(q => q.CorrectAnswer).ToArray()));
                
                answers.forEach(function(answer, i) {
                    if (answer.selectedOption === correctAnswers[i]) {
                        correctCount++;
                    }
                });
                
                const score = Math.round((correctCount / totalQuestions) * 100);
                
                // Show result
                alert(`Điểm của bạn: ${score}% (${correctCount}/${totalQuestions} câu đúng)`);
                
                // Redirect back to tests page
                window.location.href = '/Test';
            }

            // Initialize test
            startTimer();
            showQuestion(1);
            updateProgressBar();

            // Event handlers
            $('.test-option input').on('change', function() {
                const questionNum = parseInt($(this).attr('name').replace('question-', ''));
                answeredQuestions.add(questionNum);
                
                // Update navigation
                $(`.question-nav-btn[data-question="${questionNum}"]`).removeClass('btn-outline-secondary btn-primary').addClass('btn-success');
                
                updateProgressBar();
            });
            
            $('#prevBtn').on('click', function() {
                if (currentQuestion > 1) {
                    showQuestion(currentQuestion - 1);
                }
            });
            
            $('#nextBtn').on('click', function() {
                if (currentQuestion < totalQuestions) {
                    showQuestion(currentQuestion + 1);
                }
            });
            
            $('#submitBtn, #finalSubmitBtn').on('click', function() {
                if (confirm('Bạn có chắc muốn nộp bài?')) {
                    submitTest();
                }
            });
            
            $('.question-nav-btn').on('click', function() {
                const questionNum = parseInt($(this).data('question'));
                showQuestion(questionNum);
            });
        });
    </script>
}