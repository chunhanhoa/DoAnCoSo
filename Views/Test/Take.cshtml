@model TiengAnh.Models.TestModel
@{
    ViewData["Title"] = "Làm bài kiểm tra " + Model.Title;
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-lg-9">
            <!-- Test header -->
            <div class="card mb-4 shadow-sm">
                <div class="card-body">
                    <h1 class="h3">@Model.Title</h1>
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge bg-primary me-2">@Model.Level</span>
                            <span class="badge bg-info">@Model.Category</span>
                        </div>
                        <div id="test-timer" class="h5 mb-0">
                            <i class="bi bi-clock"></i> <span id="time-remaining">@Model.Duration:00</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Test content -->
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div id="test-progress" class="mb-4">
                        <div class="progress" style="height: 10px;">
                            <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="d-flex justify-content-between mt-1">
                            <small id="progress-text">Câu 1/@Model.Questions.Count</small>
                            <small id="progress-percentage">0%</small>
                        </div>
                    </div>

                    <form id="test-form">
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            var question = Model.Questions[i];
                            var questionNumber = i + 1;
                            
                            <div class="test-question @(questionNumber > 1 ? "d-none" : "")" id="question-@questionNumber">
                                <div class="question-container p-4 mb-4 bg-light rounded">
                                    <h5 class="card-title mb-4 fw-bold">Câu @questionNumber: @question.QuestionText</h5>
                                    
                                    <div class="test-options">
                                        @for (int j = 0; j < question.Options.Count; j++)
                                        {
                                            <div class="form-check test-option mb-3 p-3 border rounded hover-option">
                                                <input class="form-check-input" type="radio" name="question-@questionNumber" id="q@(questionNumber)-option@(j)" value="@j">
                                                <label class="form-check-label w-100 ms-2" for="q@(questionNumber)-option@(j)">
                                                    @question.Options[j]
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <div class="d-flex justify-content-between mt-4">
                            <button type="button" id="prevBtn" class="btn btn-outline-secondary" disabled>
                                <i class="bi bi-arrow-left"></i> Câu trước
                            </button>
                            <button type="button" id="nextBtn" class="btn btn-primary">
                                Câu tiếp theo <i class="bi bi-arrow-right"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <!-- Question navigation -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Câu hỏi</h5>
                </div>
                <div class="card-body">
                    <div class="question-navigation-grid">
                        @{
                            var questionsCount = Model.Questions.Count;
                            var questionsPerRow = (int)Math.Ceiling(questionsCount / 4.0);
                        }
                        
                        @for (int row = 0; row < 4; row++)
                        {
                            <div class="question-nav-row mb-2">
                                @for (int i = row * questionsPerRow; i < Math.Min((row + 1) * questionsPerRow, questionsCount); i++)
                                {
                                    <button type="button" class="btn btn-outline-secondary question-nav-btn" 
                                            data-question="@(i + 1)">@(i + 1)</button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="card shadow-sm mt-3">
                <div class="card-body">
                    <button id="finalSubmitBtn" class="btn btn-danger w-100">
                        <i class="bi bi-check2-circle"></i> Nộp bài kiểm tra
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Notification -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1080">
    <div id="notification-toast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-circle me-2"></i>
                <span id="notification-message">Thông báo</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<style>
    /* Make option areas appear clickable */
    .test-option {
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 12px !important;
        border-color: #dee2e6 !important;
        margin-bottom: 12px !important;
    }
    
    .test-option:hover {
        background-color: rgba(13, 110, 253, 0.1);
        border-color: #b8daff !important;
        transform: translateY(-2px);
    }
    
    .test-option .form-check-input:checked ~ .form-check-label {
        font-weight: 500;
    }
    
    .hover-option {
        transition: all 0.2s ease-in-out;
    }
    
    .question-container {
        border-left: 4px solid #0d6efd;
        box-shadow: 0 .125rem .25rem rgba(0,0,0,.075);
        background-color: #f8f9fa !important;
    }
    
    .form-check-input {
        width: 1.2em;
        height: 1.2em;
        margin-top: 0.25em;
    }
    
    .form-check-label {
        cursor: pointer;
        padding: 4px 0;
        font-size: 1.05rem;
    }
    
    .card-title {
        color: #0d6efd;
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 0.75rem;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize test variables
            let currentQuestion = 1;
            let totalQuestions = @Model.Questions.Count;
            let timeLeft = @Model.Duration * 60; // Convert minutes to seconds
            let answeredQuestions = new Set();
            let timerInterval;

            // Function to show a specific question
            function showQuestion(questionNum) {
                $('.test-question').addClass('d-none');
                $(`#question-${questionNum}`).removeClass('d-none');
                
                // Update navigation buttons
                $('#prevBtn').prop('disabled', questionNum === 1);
                
                if (questionNum === totalQuestions) {
                    $('#nextBtn').addClass('d-none');
                    $('#submitBtn').removeClass('d-none');
                } else {
                    $('#nextBtn').removeClass('d-none');
                    $('#submitBtn').addClass('d-none');
                }
                
                // Update question navigation highlighting
                $('.question-nav-btn').removeClass('btn-primary');
                $(`.question-nav-btn[data-question="${questionNum}"]`).addClass('btn-primary');
                
                // Update progress text
                $('#progress-text').text(`Câu ${questionNum}/${totalQuestions}`);
                
                // Current question becomes the global current question
                currentQuestion = questionNum;
            }

            // Function to update progress bar
            function updateProgressBar() {
                const progress = (answeredQuestions.size / totalQuestions) * 100;
                $('#progress-bar').css('width', `${progress}%`);
                $('#progress-percentage').text(`${Math.round(progress)}%`);
            }

            // Start the timer
            function startTimer() {
                timerInterval = setInterval(function() {
                    timeLeft--;
                    
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    
                    $('#time-remaining').text(`${minutes}:${seconds < 10 ? '0' : ''}${seconds}`);
                    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        alert('Hết thời gian! Bài kiểm tra của bạn sẽ được nộp tự động.');
                        submitTest();
                    }
                }, 1000);
            }

            // Function to handle submitting the test
            function submitTest() {
                clearInterval(timerInterval);
                
                // Get answers
                const answers = [];
                const userAnswers = [];
                for (let i = 1; i <= totalQuestions; i++) {
                    const selectedOption = $(`input[name="question-${i}"]:checked`).val();
                    const selectedValue = selectedOption !== undefined ? parseInt(selectedOption) : -1;
                    
                    answers.push({
                        questionId: i,
                        selectedOption: selectedValue
                    });
                    
                    userAnswers.push(selectedValue);
                }
                
                // Calculate score
                let correctCount = 0;
                const correctAnswers = @Html.Raw(Json.Serialize(Model.Questions.Select(q => q.CorrectAnswer).ToArray()));
                
                answers.forEach(function(answer, i) {
                    if (answer.selectedOption === correctAnswers[i]) {
                        correctCount++;
                    }
                });
                
                const score = Math.round((correctCount / totalQuestions) * 100);
                const timeUsed = @Model.Duration * 60 - timeLeft;
                const timeTaken = formatTime(timeUsed);
                
                // Prepare submission data
                const submissionData = {
                    testId: '@Model.Id',
                    userAnswers: userAnswers,
                    score: score,
                    correctCount: correctCount,
                    timeUsed: timeUsed,
                    timeTaken: timeTaken
                };
                
                // Disable buttons during submission
                $('#finalSubmitBtn, #submitBtn').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...');
                
                // Submit via AJAX to server
                $.ajax({
                    url: '@Url.Action("SubmitTest", "Test")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(submissionData),
                    success: function(response) {
                        // Redirect to results page
                        window.location.href = response.redirectUrl;
                    },
                    error: function(xhr, status, error) {
                        console.error('Error submitting test:', error);
                        showNotification('Có lỗi xảy ra khi nộp bài. Vui lòng thử lại.', 'danger');
                        $('#finalSubmitBtn, #submitBtn').prop('disabled', false).html('<i class="bi bi-check2-circle"></i> Nộp bài kiểm tra');
                    }
                });
            }
            
            // Helper function to format time
            function formatTime(seconds) {
                const mins = Math.floor(seconds / 60);
                const secs = seconds % 60;
                return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
            }

            // Function to show notification
            function showNotification(message, type = 'danger') {
                // Set message
                $('#notification-message').text(message);
                
                // Set type (change background color)
                const toast = $('#notification-toast');
                toast.removeClass('bg-danger bg-success bg-warning bg-info');
                toast.addClass(`bg-${type}`);
                
                // Create Bootstrap toast instance if not already created
                const toastInstance = new bootstrap.Toast(document.getElementById('notification-toast'), {
                    delay: 5000 // Auto hide after 5 seconds
                });
                
                // Show toast
                toastInstance.show();
            }

            // Initialize test
            startTimer();
            showQuestion(1);
            updateProgressBar();

            // Make the entire option container clickable
            $(document).on('click', '.test-option', function(e) {
                // Don't trigger if clicked directly on the radio button (it already handles that)
                if (e.target.type !== 'radio') {
                    // Find the radio input inside this option container and click it
                    const radioInput = $(this).find('input[type="radio"]');
                    radioInput.prop('checked', true);
                    
                    // Trigger the change event to update the UI
                    radioInput.trigger('change');
                }
            });

            // Event handlers
            $('.test-option input').on('change', function() {
                const questionNum = parseInt($(this).attr('name').replace('question-', ''));
                answeredQuestions.add(questionNum);
                
                // Update navigation
                $(`.question-nav-btn[data-question="${questionNum}"]`).removeClass('btn-outline-secondary btn-primary').addClass('btn-success');
                
                updateProgressBar();
            });
            
            $('#prevBtn').on('click', function() {
                if (currentQuestion > 1) {
                    showQuestion(currentQuestion - 1);
                }
            });
            
            $('#nextBtn').on('click', function() {
                if (currentQuestion < totalQuestions) {
                    showQuestion(currentQuestion + 1);
                }
            });
            
            // Separate handlers for submit buttons
            $('#submitBtn').on('click', function() {
                if (confirm('Bạn có chắc muốn nộp bài?')) {
                    submitTest();
                }
            });
            
            $('#finalSubmitBtn').on('click', function() {
                // Check if all questions have been answered
                if (answeredQuestions.size < totalQuestions) {
                    // Some questions are still unanswered
                    showNotification('Vui lòng trả lời tất cả các câu hỏi.');
                    
                    // Find and navigate to the first unanswered question
                    for (let i = 1; i <= totalQuestions; i++) {
                        if (!answeredQuestions.has(i)) {
                            showQuestion(i);
                            break;
                        }
                    }
                    return;
                }
                
                // All questions answered, ask for confirmation
                if (confirm('Bạn có chắc muốn nộp bài?')) {
                    submitTest();
                }
            });
            
            $('.question-nav-btn').on('click', function() {
                const questionNum = parseInt($(this).data('question'));
                showQuestion(questionNum);
            });
        });
    </script>
}